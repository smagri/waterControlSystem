// Class definition, or implemntation, is placed in .cpp file.

// C++ system header files
#include <iostream>   // std::cout
#include <string>     // std::string, std::to_string
#include <QString>    // Qstring

// Serial Port header Files
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>


// Qwt system header files, gui related ones in ui_tanklevel.h
//#include <qwt_slider.h>
//#include <qwt_plot.h>


// non-system, local, headers
#include "tanklevel.hpp"
#include "ui_tanklevel.h"



TankLevel::TankLevel(QWidget *parent) :
  QWidget(parent),
  ui(new Ui::TankLevel){
  
  int retval;

  cout<<"dbg: In class DEFAULT CONstructor in .cpp"<<endl;

  ui->setupUi(this);

  // Arduino serial port device is /dev/ttyACM0, read here.
  // Allocate 12 char array on heap for serial port name.
  char *device = new char[12];
  strcpy(device, "/dev/ttyACM0");

  
  // this needs to be in an event/timer loop eventually, otherwise we only
  // get one invocation of it
  if ( (retval = readSerialPort(device)) > 0 ){
    fprintf(stderr,
	    "TankLevel::TankLevel: error in COMMS to  serial port %s.\n",
	    device);
    return;
  }

  updatePlotLevel();
  updateAbsoluteLevel();
  updatePercentageLevel();

  cout<<"dbg: Exiting class DEFAULT CONstructor in .cpp"<<endl;

}


TankLevel::~TankLevel(){

  cout<<"dbg: In class DEFAULT DEstructor in .cpp"<<endl;

  delete ui;
}


void TankLevel::updatePlotLevel(){

  cout<<"dbg: in updatePlotLevel() via C++"<<endl;
  fprintf(stderr, "dbg: in updatePlotLevel() via C\n");

  double time[] = {10, 20, 30, 40, 50, 60};
  double height[] = {90, 80, 70, 75, 85, 95};
  
  fprintf(stderr,"dbg: sizeof time and height arrays is: %ld\n",
	  sizeof(time)/sizeof(double));

  ui->qwtPlot->setTitle("Water Tank Level");

  ui->qwtPlot->setAxisTitle(QwtPlot::xBottom, "Time (minutes)");
  ui->qwtPlot->setAxisScale(QwtPlot::xBottom, 0, 60);
  ui->qwtPlot->setAxisTitle(QwtPlot::yLeft, "Height (kilo litres)");
  ui->qwtPlot->setAxisScale(QwtPlot::yLeft, 0.0, 130.0);

//  QwtPlotGrid *plotGrid = new QwtPlotGrid();
//  plotGrid->attach(ui->qwtPlot);

  // Alternative line style in first line graph on examples/curvedemo1.cpp
  //
  // value symbol = Cross in color black
  // plotCurve->setSymbol(new QwtSymbol(QwtSymbol::Cross, Qt::NoBrush,
  // 				     QPen(Qt::black), QSize(5, 5) ) );
  // plotCurve.setPen(QColor(Qt::darkGreen)); // color = darkGreen
  // plotCurve.setStyle(QwtPlotCurve::Lines); // style = lineGraph
  // plotCurve.setCurveAttribute(QwtPlotCurve::Fitted);  // fit curve to crosses

  QwtPlotCurve *plotCurve = new QwtPlotCurve("Tank Level over 60min");
  plotCurve->attach(ui->qwtPlot); // attach the QwtPlot instance to plotCurve
  plotCurve->setPen(QColor(Qt::darkBlue));
  plotCurve->setStyle(QwtPlotCurve::Lines);
  plotCurve->setRenderHint(QwtPlotItem::RenderAntialiased);
  plotCurve->setSamples( time, height, (sizeof(time)/sizeof(double)) );

  return;
}


void TankLevel::updateAbsoluteLevel(){

//  int levelValue = 42;
//  QString levelValueStr;

  cout<<"dbg: in updateAbsoluteLevel() via C++"<<endl;
  fprintf(stderr, "dbg: in updateAbsoluteLevel() via C\n");


  ui->sliderAbsoluteLevel->setRange(0.0, 130.0, 1, 1);
  ui->sliderAbsoluteLevel->setScale(1, 130, 5);
  ui->sliderAbsoluteLevel->setScaleMaxMinor(5);
  ui->sliderAbsoluteLevel->setValue(30);
  
  ui->labelAbsLevel->setText(readStr);

  return;
}


void TankLevel::updatePercentageLevel(){


  cout<<"dbg: in updatePercentageLevel() via C++"<<endl;
  fprintf(stderr, "dbg: in updatePercentageLevel() via C\n");


  ui->sliderPercentageLevel->setRange(0, 100, 1, 1); // min,max,step,page
  ui->sliderPercentageLevel->setScale(1, 100, 5); // min,max,step
  ui->sliderPercentageLevel->setScaleMaxMinor(5); // max num of minor ticks
  ui->sliderPercentageLevel->setValue(35);
  
  ui->labelPercentLevel->setText(readStr);
  //  levelValueStr = QString::number(levelValue);

  return;
}


//int TankLevel::readSerialPort(char *device, int *readInt, char *readStr){
int TankLevel::readSerialPort(char *device){

  struct termios tio;
  struct termios stdio;
  struct termios old_stdio;
  int tty_fd;

  fd_set readfds; // The set of file descriptors probed for 'ready for
                  // reading', that is read() system call will not
                  // block/sleep.

  // select() timout value in seconds and microseconds.
  // struct timeval timeout;

  int retval;

  // //  QString readStrl = "";
  char *readStr = new char[10];

  char readChar = 0;
  fprintf(stderr, "dbg: readSP: readChar is initialised to: %d\n", readChar);
  
  readInt = 0;
  fprintf(stderr, "dbg: readSP: readInt is initialised to: %d\n", readInt);
  
  int charNum = 0;



  tcgetattr(STDOUT_FILENO, &old_stdio);
 

  // Configure stdin and stout, as part make them non-blocking streams.
  memset(&stdio ,0, sizeof(stdio));
  stdio.c_iflag=0;
  stdio.c_oflag=0;
  stdio.c_cflag=0;
  stdio.c_lflag=0;
  stdio.c_cc[VMIN]=1;
  stdio.c_cc[VTIME]=0;
  tcsetattr(STDOUT_FILENO, TCSANOW, &stdio);
  tcsetattr(STDOUT_FILENO, TCSAFLUSH, &stdio);
  fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK); // make the reads non-blocking
 
  // Configure the terminal/serial port.
  memset(&tio, 0, sizeof(tio));
  tio.c_iflag=0;
  tio.c_oflag=0;
  tio.c_cflag=CS8|CREAD|CLOCAL; // 8n1, see termios.h for more information
  tio.c_lflag=0;
  tio.c_cc[VMIN]=1;
  tio.c_cc[VTIME]=5;


  // Open the terminal/serial port stream: as read, write and non-blocking.
  if ( (tty_fd = open(device, O_RDWR | O_NONBLOCK)) == -1){
    perror("readSerialPort");
    fprintf(stderr, "readSerialPort: error in OPENING serial port %s.\n",
            device);
    return 1;
  }

  cfsetospeed(&tio, B9600); // as per arduino sketch
  cfsetispeed(&tio, B9600); // as per arduino sketch
  tcsetattr(tty_fd, TCSANOW, &tio);

  // Loop until Line Feed(ie LF char = 10base10) character is found,
  // thus all chars for the next water level value have been received.
  while (readChar != 10){

    // Clear and reset fds ready for next select() call.
    //
    // This is as per examples in select_tut(2)) and Stevens and also,
    // ~proj/atnf/cabb/src/callbacks.c.
    //
    FD_ZERO(&readfds); // clear/reset read file descriptors
    FD_SET(tty_fd, &readfds); // watch for chars on tty_fd/serial port.
    //FD_SET(STDIN_FILENO, &readfds); // watch for chars on stdin=fd=0
    
    // Timeout from the select() call after timeout.sec/usec of non-activity.
    //
    // select() should really return way before so this is just a safety catch.
    // Set timeout = NULL for indefinate blocking/sleeping, and = 0 for polling.
    //
    //timeout.tv_sec = 60; // 1 minute timeout for select().
    //timeout.tv_usec = 0;

    // select() allows you to monitor more than one file descriptor at
    // a time.  It blocks(ie sleeps) till one or more file descriptors
    // become 'ready' for some io operation.  A file descriptor is
    // 'ready' when a corresponding type of system call(eg read()) for
    // readfds)will not block/sleep.
    if ( (retval = select((FD_SETSIZE+1), &readfds,
			  (fd_set *) NULL,(fd_set *) NULL, NULL))  == -1 ){
      perror("readSerialPort");
      fprintf(stderr, "readSerialPort: select returned %d\n", retval);
      return 1;
    }


    // More than one fd can be ready at a time.  That is, character
    // present on the serial port and at stdin simultaneously.
    if (FD_ISSET(tty_fd, &readfds)){
      // Data is available on the serial port, read it from port and
      // print it out to stdout.
      if ( (retval = read(tty_fd, &readChar, 1)) == -1){
	perror("readSerialPort");
	fprintf(stderr,	"readSerialPort: error READING from serial port %s.\n",
		device);
	return 2;
      }
      else{
	fprintf(stderr, "dbg: readSP: read() success, readChar=%c\n", readChar);
      }
      if ( (retval = write(STDOUT_FILENO, &readChar, 1)) == -1 ){
	perror("readSerialPort");
	fprintf(stderr,	"readSerialPort: error WRITING to  serial port %s.\n",
		device);
	return 3;
      }
      else{
	// integer -> conversion options:
	//	readStrl = to_string(readInt);
	//	readStrl = QString::number(readChar);
	// OR	readStrl = QString::setNum(readChar);
	// OR	string readStrl = to_string(readChar); in std:: c++ classs
	// OR	string readStrl = itoa(readChar);  not in ANSI-C though
	// OR	string readStrl = sprintf(readChar);
	readInt =  readChar;
	fprintf(stderr, "dbg: readSP: write() success, readInt=%d\n", readInt);
	readStr[charNum] = readChar;
      }

      charNum++;
    } //  if (FD_ISSET(tty_fd, &readfds)){

    
    // REMEMBER sometimes new output at serial port before finished here
    // that is may need greater delay at arduino sketch before next
    // measurment is displayed.

  } // end: while (readChar != 10){
  

  readStr[charNum] = '\0'; // string terminator = NULL = 0base10
  fprintf(stderr, "dbg: readSP: write() success, charNum=%d, readStr=%s\n",
	  charNum, readStr);

  // close(tty_fd) on its own does not work as compiler trys to use
  // QWidget::close.  Use :: prefix to use global close fn.
  //
  // No need for error handling in close as that would be a coding err??
  ::close(tty_fd);
  tcsetattr(STDOUT_FILENO, TCSANOW, &old_stdio);

  return 0; // success
}

